const PerseService = {

  //get all assignments
  //assignments
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // date_assigned DATE NOT NULL, /*date on which coach assigned the workout*/
    // perform_on_date DATE NOT NULL, /*date on which the athlete is to perform the workout*/
    // athlete_id INTEGER NOT NULL, /*references table 'athletes' - generates name*/
    // workout_id INTEGER NOT NULL /*references table 'workouts' - generates workout name, exercises*/

  getAllAssignments(knex) {
    return knex.select('*').from('assignments')
  },

  //post an assignment
  //assignments
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // date_assigned DATE NOT NULL, /*date on which coach assigned the workout*/
    // perform_on_date DATE NOT NULL, /*date on which the athlete is to perform the workout*/
    // athlete_id INTEGER NOT NULL, /*references table 'athletes' - generates name*/
    // workout_id INTEGER NOT NULL /*references table 'workouts' - generates workout name, exercises*/

  insertAssignment(knex, newAssignment) {
      return knex
          .insert(newAssignment)
          .into('assignments')
          .returning('*')
          .then(rows => {
          return rows[0]
    })
  },

  //get all athletes
  //athletes
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // athlete_name VARCHAR NOT NULL

  getAllAthletes(knex) {
    return knex.select('*').from('athletes')
  },

  //post an athlete
  //athletes
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // athlete_name VARCHAR NOT NULL

  insertAthlete(knex, newAthlete) {
    return knex
      .insert(newAthlete)
      .into('athletes')
      .returning('*')
      .then(rows => {
        return rows[0]
      })
  },

  //get all exercise types
  //exercise-types
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // exercise_name VARCHAR NOT NULL

  getAllExerciseTypes(knex) {
    return knex.select('*').from('exercise_types')
  },

  //post an exercise type
  //exercise-types
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // exercise_name VARCHAR NOT NULL

  insertExerciseType(knex, newExerciseType) {
    return knex
      .insert(newExerciseType)
      .into('exercise_types')
      .returning('*')
      .then(rows => {
        return rows[0]
      })
  },

  //get all exercises
  //exercises
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // exercise_type INTEGER NOT NULL, /*references table exercise_types - generates name*/
    // rep_type rep_types, /*enum from rep_types*/
    // reps INTEGER,
    // resistance INTEGER,
    // sub_distance INTEGER,
    // tempo INTEGER,
    // subrest INTEGER,
    // rest INTEGER, /*generates amount of rest after the set*/
    // set_num INTEGER, /*number of times the set is performed*/
    // order INTEGER NOT NULL /*place this exercise appears in the set*/

  getAllExercises(knex) {
    return knex.select('*').from('exercises')
  },

  //post an exercise
  //exercises
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // exercise_type INTEGER NOT NULL, /*references table exercise_types - generates name*/
    // rep_type rep_types, /*enum from rep_types*/
    // reps INTEGER,
    // resistance INTEGER,
    // sub_distance INTEGER,
    // tempo INTEGER,
    // subrest INTEGER,
    // rest INTEGER, /*generates amount of rest after the set*/
    // set_num INTEGER, /*number of times the set is performed*/
    // order INTEGER NOT NULL /*place this exercise appears in the set*/

  insertExercise(knex, newExercise) {
    return knex
      .insert(newExercise)
      .into('exercises')
      .returning('*')
      .then(rows => {
        return rows[0]
      })
  },

  //get all workout types
  //workouts
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // workout_name VARCHAR NOT NULL

  getAllWorkouts(knex) {
    return knex.select('*').from('workouts')
  },

  //post a workout type
  //workouts
    // id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    // workout_name VARCHAR NOT NULL

  insertWorkout(knex, newWorkout) {
    return knex
      .insert(newWorkout)
      .into('workouts')
      .returning('*')
      .then(rows => {
        return rows[0]
      })
  },

  //get join table entries
  //wkt_ex_join

  getAllJoinEntries(knex) {
    return knex.select('*').from('wkt_ex_join')
  },

  //post to join table
  //wkt_ex_join
  
  insertJoinEntries(knex, newEntry) {
    return knex
      .insert(newEntry)
      .into('wkt_ex_join')
      .returning('*')
      .then(rows => {
        return rows[0]
      })
  }

}
  
module.exports = PerseService